'use client';

import { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import { FaHeart, FaShoppingCart } from 'react-icons/fa';
import { generatePrice } from '@/utils/priceGenerator';
import Link from 'next/link';
import Image from 'next/image';

interface Product {
  id: number;
  name: string;
  description: string;
  price: string | number;
  image: string | null;
  stock: number;
  brand_name: string;
  model_name: string;
  category_name: string;
}

// Define product categories with exact backend names
const PRODUCT_CATEGORIES = [
  { 
    id: 'batteries',
    name: 'Battery Replacement Parts',
    displayName: 'Batteries',
    urlName: 'Batteries',
    group: 'batteries'
  },
  { 
    id: 'screens',
    name: 'Screen & Display Assemblies',
    displayName: 'Screens & Displays',
    urlName: 'Screens & Displays',
    group: 'screens'
  },
  { 
    id: 'charging',
    name: 'Charging Port & Cable Modules',
    displayName: 'Charging Ports & Cables',
    urlName: 'Charging Ports & Cables',
    group: 'charging'
  },
  { 
    id: 'cameras',
    name: 'Camera & Lens Assemblies',
    displayName: 'Cameras & Lens',
    urlName: 'Cameras & Lens',
    group: 'cameras'
  },
  { 
    id: 'buttons',
    name: 'Power & Volume Button Modules',
    displayName: 'Power & Volume Buttons',
    urlName: 'Power & Volume Buttons',
    group: 'buttons'
  },
  { 
    id: 'speakers',
    name: 'Speaker & Audio Components',
    displayName: 'Speakers & Audio',
    urlName: 'Speakers & Audio',
    group: 'speakers'
  }
];

const getModelImageIndex = (modelName: string): number => {
  // Map of model names to image numbers (1-6)
  const modelMap: { [key: string]: number } = {
    'Galaxy S21': 1,
    'Galaxy S22': 2,
    'Galaxy S23': 3,
    'Galaxy S24': 4,
    'iPhone 13': 5,
    'iPhone 14': 6,
    'iPhone 15': 1,
    'iPhone 15 Pro': 2,
    'Edge 40': 3,
    'Find X6': 4,
    'G Stylus': 5,
    'Galaxy A55': 6
  };

  return modelMap[modelName] || Math.floor(Math.random() * 6) + 1;
};

const getCategoryImage = (category: string, modelName: string): string => {
  // First, map the backend category names to the exact folder names
  const categoryMap: { [key: string]: string } = {
    'Battery Replacement Parts': 'batteries',
    'Screen & Display Assemblies': 'Screens&Displays',
    'Charging Port & Cable Modules': 'ChargingPorts&cables',
    'Camera & Lens Assemblies': 'Cameras&Lens',
    'Power & Volume Button Modules': 'Power&VolumeButtons',
    'Speaker & Audio Components': 'Speakers&AudioParts',
    // Add fallback mappings for shorter names
    'battery': 'batteries',
    'screen': 'Screens&Displays',
    'charging': 'ChargingPorts&cables',
    'camera': 'Cameras&Lens',
    'button': 'Power&VolumeButtons',
    'speaker': 'Speakers&AudioParts'
  };

  const folderName = categoryMap[category] || categoryMap[category.toLowerCase()] || category;
  const imageNumber = getModelImageIndex(modelName);

  // Construct the path based on the category
  const basePath = `/assets/${folderName}`;
  
  switch(folderName) {
    case 'Power&VolumeButtons':
      // Special case: Power&VolumeButtons has mixed extensions (1 and 5 are PNG)
      return `${basePath}/Power&VolumeButtons${imageNumber}${imageNumber === 1 || imageNumber === 5 ? '.png' : '.jpeg'}`;
    case 'Cameras&Lens':
      return `${basePath}/cameras&lens${imageNumber}.jpeg`;
    case 'ChargingPorts&cables':
      return `${basePath}/ChargingPorts&cables${imageNumber}.jpeg`;
    case 'Screens&Displays':
      return `${basePath}/Screens&Displays${imageNumber}.jpeg`;
    case 'Speakers&AudioParts':
      return `${basePath}/Speakers&AudioParts${imageNumber}.jpeg`;
    case 'batteries':
    default:
      return `${basePath}/battery${imageNumber}.jpeg`;
  }
};

// Sample spare parts data
const SAMPLE_SPARE_PARTS: Product[] = [
  // Battery Products
  {
    id: 1,
    name: 'Samsung S23 Battery',
    description: 'Original battery replacement with 4000mAh capacity',
    price: 2499.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 15,
    brand_name: 'Samsung',
    model_name: 'Galaxy S23',
    category_name: 'battery'
  },
  {
    id: 2,
    name: 'iPhone 15 Battery',
    description: 'Genuine Apple battery replacement',
    price: 3999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 12,
    brand_name: 'Apple',
    model_name: 'iPhone 15',
    category_name: 'battery'
  },
  // Screen Products
  {
    id: 3,
    name: 'S23 AMOLED Display',
    description: 'Original Samsung AMOLED screen with installation kit',
    price: 12999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 10,
    brand_name: 'Samsung',
    model_name: 'Galaxy S23',
    category_name: 'screen'
  },
  {
    id: 4,
    name: 'iPhone 15 Pro OLED',
    description: 'Genuine Apple OLED display with True Tone',
    price: 15999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 8,
    brand_name: 'Apple',
    model_name: 'iPhone 15 Pro',
    category_name: 'screen'
  },
  // Charging Port Products
  {
    id: 5,
    name: 'S23 USB-C Port',
    description: 'Original charging port with flex cable',
    price: 1499.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 20,
    brand_name: 'Samsung',
    model_name: 'Galaxy S23',
    category_name: 'charging'
  },
  {
    id: 6,
    name: 'iPhone Lightning Port',
    description: 'Genuine Apple lightning port assembly',
    price: 2499.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 15,
    brand_name: 'Apple',
    model_name: 'iPhone 15',
    category_name: 'charging'
  },
  // Camera Products
  {
    id: 7,
    name: 'S23 Main Camera',
    description: '200MP main camera module with OIS',
    price: 8999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 8,
    brand_name: 'Samsung',
    model_name: 'Galaxy S23',
    category_name: 'camera'
  },
  {
    id: 8,
    name: 'iPhone 15 Pro Camera',
    description: '48MP main camera with LiDAR',
    price: 9999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 6,
    brand_name: 'Apple',
    model_name: 'iPhone 15 Pro',
    category_name: 'camera'
  },
  // Button Products
  {
    id: 9,
    name: 'S23 Button Set',
    description: 'Complete button set with flex cables',
    price: 999.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 25,
    brand_name: 'Samsung',
    model_name: 'Galaxy S23',
    category_name: 'button'
  },
  {
    id: 10,
    name: 'iPhone Button Kit',
    description: 'Full button replacement set',
    price: 1299.99,
    image: null,  // Will be generated by getCategoryImage
    stock: 20,
    brand_name: 'Apple',
    model_name: 'iPhone 15',
    category_name: 'button'
  }
];

// Add interface for grouped products
interface GroupedProducts {
  [category: string]: Product[];
}

export default function ProductsPage() {
  const searchParams = useSearchParams();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Get URL parameters
  const brandId = searchParams.get('brand');
  const modelId = searchParams.get('model');
  const category = searchParams.get('category');
  const searchQuery = searchParams.get('search');

  // Debug log for URL parameters
  useEffect(() => {
    console.log('URL Parameters:', {
      brand: brandId,
      model: modelId,
      category,
      search: searchQuery
    });
  }, [brandId, modelId, category, searchQuery]);

  const getPageTitle = () => {
    if (searchQuery) return `Search results for "${searchQuery}"`;
    if (category) return `${category} Parts`;
    if (modelId) return 'Model Parts';
    if (brandId) return 'Brand Parts';
    return 'All Parts';
  };

  const fetchProducts = async () => {
    setLoading(true);
    setError('');
    
    try {
      let url = 'http://localhost:8000/api/products/';
      const params = new URLSearchParams();

      if (brandId) {
        params.append('brand', brandId);
      }
      if (modelId) {
        params.append('model', modelId);
      }
      if (category) {
        // Find exact category match
        const matchedCategory = PRODUCT_CATEGORIES.find(cat => 
          cat.urlName === category ||
          cat.displayName === category ||
          cat.name === category
        );

        if (matchedCategory) {
          // Use the exact backend category name
          params.append('category', matchedCategory.name);
          console.log('Using backend category name:', matchedCategory.name);
        } else {
          // If no match found, use the original category
          params.append('category', category);
          console.log('Using original category:', category);
        }
      }
      if (searchQuery) {
        params.append('search', searchQuery);
      }

      const queryString = params.toString();
      if (queryString) {
        url += `?${queryString}`;
      }

      console.log('Fetching products from:', url);
      
      const response = await fetch(url);
      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || `Failed to fetch products: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Received products:', data);
      
      if (Array.isArray(data)) {
        setProducts(data);
        setError('');
      } else {
        throw new Error('Invalid data format received from server');
      }
    } catch (err) {
      console.error('Error fetching products:', err);
      setError(err instanceof Error ? err.message : 'Failed to load products');
      setProducts([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log('Parameters changed:', { brandId, modelId, category, searchQuery });
    fetchProducts();
  }, [brandId, modelId, category, searchQuery]);

  const addToCart = async (productId: number) => {
    try {
      const product = products.find(p => p.id === productId);
      if (!product) {
        throw new Error('Product not found');
      }

      const token = localStorage.getItem('token');
      if (token) {
        // For logged-in users, add to server cart
        const response = await fetch('http://localhost:8000/api/cart/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Token ${token}`
          },
          body: JSON.stringify({
            product: productId,
            quantity: 1
          })
        });

        if (!response.ok) {
          throw new Error('Failed to add to cart');
        }

        // Dispatch cart updated event for logged-in users
        window.dispatchEvent(new CustomEvent('cartUpdated'));
      } else {
        // For non-logged in users, add to localStorage cart
        const cart = JSON.parse(localStorage.getItem('cart') || '[]');
        const existingItem = cart.find((item: any) => item.product === productId);
        
        if (existingItem) {
          existingItem.quantity += 1;
        } else {
          cart.push({
            product: productId,
            quantity: 1,
            name: product.name,
            price: product.price,
            image: getCategoryImage(product.category_name, product.model_name),
            brand_name: product.brand_name,
            model_name: product.model_name,
            category_name: product.category_name
          });
        }
        
        localStorage.setItem('cart', JSON.stringify(cart));
        
        // Dispatch both events to ensure all listeners are notified
        window.dispatchEvent(new Event('storage'));
        window.dispatchEvent(new CustomEvent('cartUpdated'));
      }

      // Show success message
      alert('Item added to cart successfully!');
    } catch (error) {
      console.error('Error adding to cart:', error);
      setError(error instanceof Error ? error.message : 'Failed to add item to cart');
    }
  };

  const addToWishlist = async (productId: number) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        throw new Error('Please login to add items to wishlist');
      }

      const response = await fetch('http://localhost:8000/api/wishlist/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          product_id: productId,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to add item to wishlist');
      }

      // Show success message or update UI
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to add item to wishlist');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-[#0f172a] to-[#1e293b]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-3xl font-bold text-white mb-4">Spare Parts</h1>
      <h2 className="text-xl text-gray-400 mb-6">{getPageTitle()}</h2>

      <div className="flex flex-wrap gap-2 mb-6">
        {PRODUCT_CATEGORIES.map((cat) => (
          <Link
            key={cat.id}
            href={`/products?category=${encodeURIComponent(cat.urlName)}`}
            className={`px-4 py-2 rounded-lg transition-colors duration-300 ${
              category === cat.urlName
                ? 'bg-blue-500 text-white'
                : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600/50'
            }`}
          >
            {cat.displayName}
          </Link>
        ))}
      </div>

      {error && (
        <div className="text-red-500 mb-4">
          {error}
        </div>
      )}

      {products.length === 0 ? (
        <div className="text-center text-gray-400 mt-8 p-8 bg-[#1e293b]/50 backdrop-blur-sm rounded-xl border border-gray-700/50">
          No spare parts found for the selected filters or search query.
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product) => (
            <div
              key={product.id}
              className="group bg-[#1e293b]/50 backdrop-blur-sm rounded-lg shadow-md overflow-hidden border border-gray-700/50 hover:border-blue-500/50 hover:shadow-xl hover:shadow-blue-500/10 transition-all duration-300 transform hover:-translate-y-1"
            >
              <Link href={`/products/${product.id}`} className="block">
                <div className="relative h-48 bg-gray-800 overflow-hidden">
                  <img
                    src={getCategoryImage(product.category_name, product.model_name)}
                    alt={product.name}
                    className="w-full h-full object-cover transform group-hover:scale-110 transition-transform duration-300"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.onerror = null;
                      target.src = '/assets/file.svg';
                      target.className = 'w-12 h-12 m-auto opacity-50';
                    }}
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-[#1e293b] via-transparent to-transparent opacity-0 group-hover:opacity-60 transition-opacity duration-300"></div>
                </div>
                <div className="p-4">
                  <h2 className="text-xl font-semibold text-white mb-2 group-hover:text-blue-400 transition-colors duration-300">
                    {product.name}
                  </h2>
                  <p className="text-gray-400 text-sm mb-4">
                    {product.description}
                  </p>
                  <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-white group-hover:text-blue-400 transition-colors duration-300">
                      ₹{typeof product.price === 'string' ? parseFloat(product.price).toFixed(2) : product.price.toFixed(2)}
                    </span>
                  </div>
                </div>
              </Link>
              <div className="px-4 pb-4">
                <div className="flex justify-between items-center">
                  <div className="text-sm text-gray-400 group-hover:text-gray-300 transition-colors duration-300">
                    {product.stock > 0 ? `${product.stock} in stock` : 'Out of stock'}
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => addToWishlist(product.id)}
                      className="p-2 text-red-400 hover:bg-red-500/20 hover:text-red-300 rounded-full transition-all duration-300 transform hover:scale-110"
                      title="Add to Wishlist"
                    >
                      <FaHeart className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => addToCart(product.id)}
                      className="p-2 text-blue-400 hover:bg-blue-500/20 hover:text-blue-300 rounded-full transition-all duration-300 transform hover:scale-110"
                      title="Add to Cart"
                    >
                      <FaShoppingCart className="h-5 w-5" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}